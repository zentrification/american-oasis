# load foundation
$(document).foundation()

$('#before_after').beforeAfter
  moveSelector: '#move_on_me'
  moveAdjust: 0

data = [
  key: "Humans (100s)"
  values: [[1850, 8], [1860, 915], [1870, 32.15], [1880, 70.07], [1890, 51.50], [1900, 75.31], [1910, 131.91], [1920, 202.92], [1930, 325.06], [1940, 357.52], [1950, 454.54], [1960, 2128.92], [1970, 2629.33], [1980, 3305.37], [1990, 4053.90], [2000, 4866.99], [2010, 5201.16]]
,
  key: "Birds"
  values: [[1850, 340], [1860, 330], [1870, 320], [1880, 310], [1890, 300], [1900, 250], [1910, 230], [1920, 210], [1930, 200], [1940, 170], [1950, 150], [1960, 140], [1970, 130], [1980, 110], [1990, 120], [2000, 110], [2010, 100]]
,
  key: "Aquifer Level"
  values: [[1850, 70], [1860, 65], [1870, 70], [1880, 75], [1890, 80], [1900, 85], [1910, 90], [1920, 100], [1930, 100], [1940, 95], [1950, 110], [1960, 150], [1970, 170], [1980, 290], [1990, 300], [2000, 305], [2010, 310]]
# ,
#   key: "Yearly Rainfall"
#   values: [[1850, 12], [1860, 9], [1870, 10], [1880, 11], [1890, 12], [1900, 12], [1910, 9], [1920, 10], [1930, 12], [1940, 14], [1950, 5], [1960, 7], [1970, 6], [1980, 13], [1990, 10], [2000, 11], [2010, 12]]
# ,
#   key: "Yearly Temperature"
#   values: [[1850, 90], [1860, 91], [1870, 90], [1880, 92], [1890, 93], [1900, 94], [1910, 93], [1920, 94], [1930, 94], [1940, 95], [1950, 95], [1960, 96], [1970, 95], [1980, 97], [1990, 97], [2000, 98], [2010, 99]]
,
  key: "Cap Dependency"
  values: [[1850, 0], [1860, 0], [1870, 0], [1880, 0], [1890, 0], [1900, 0], [1910, 0], [1920, 100], [1930, 200], [1940, 1000], [1950, 1200], [1960, 1300], [1970, 2000], [1980, 3000], [1990, 5500], [2000, 10550], [2010, 15550]]
]

nv.addGraph ->
  chart = nv.models.stackedAreaChart()
    .x((d) -> d[0])
    .y((d) -> d[1])
    .clipEdge(true)
    .margin(left: 35, right: 0)
    .offset('expand')
    .showControls(false)
  chart.xAxis
    .showMaxMin(false)
    .tickFormat (d) -> d3.time.format("%Y") new Date(d, 0, 1)
  chart.yAxis
    .tickFormat d3.format("g")

  chart.dispatch.on 'stateChange', (e) -> nv.log('New State:', JSON.stringify(e))

  d3.select("#multigraph svg")
    .datum(data)
    .transition()
    .duration(500)
    .call chart

  nv.utils.windowResize chart.update

  chart
